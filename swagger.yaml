swagger: "2.0"
info:
  description: "Librairie"
  version: "0.0.1"
  title: "Site vitrine Librairie"
host: "localhost:3000"
basePath: "/api/v1"
produces:
  - "application/json"
securityDefinitions:
  authorization:
    type: apiKey
    name: authorization
    in: header
paths:
  /editors/{editorId}:
    parameters:
      - in: path
        name: editorId
        schema:
          type: integer
          example: 1
        description: The id of the editor to return.
        required: true
    get:
      summary: Returns a editor.
      tags:
        - editors
      responses:
        '200':
          description: The editor.
        '404':
          $ref: '#components/responses/NotFound'
    put:
      summary: Replaces a editor.
      tags:
        - editors
      parameters:
        - in: body
          name: Editor
          required: true
          description: The new editor.
          schema:
            $ref: "#/definitions/Editor"
      responses:
        '200':
          description: The new editor.
        '400':
          $ref: '#components/responses/BadRequest'
        '404':
          $ref: '#components/responses/NotFound'
    patch:
      summary: Updates a editor.
      tags:
        - editors
      parameters:
        - in: body
          name: Editor
          required: true
          description: The new editor data.
          schema:
            $ref: "#/definitions/Editor"
      responses:
        '200':
          description: The editor updated.
        '404':
          $ref: '#components/responses/NotFound'
    delete:
      summary: Deletes a editor.
      tags:
        - editors
      responses:
        '200':
          description: Deleted.
        '404':
          $ref: '#components/responses/NotFound'
  /editors:
    post:
      summary: Adds a new editor.
      tags:
        - editors
      parameters:
        - name: Editor
          in: body
          required: true
          description: The new editor.
          schema:
            $ref: "#/definitions/Editor"
      responses:
        '201':
          description: Editor created.
        '400':
          $ref: '#components/responses/BadRequest'
        '409':
          $ref: '#components/responses/Conflict'
    get:
      summary: Returns a list of editors.
      tags:
        - editors
      parameters:
        - in: query
          name: id
          schema:
            type: integer
            example: 1
          description: The editor id.
        - in: query
          name: name
          schema:
            type: string
            example: "Poches éditions"
          description: The editor name.
      responses:
        '200':
          description: The list of editors.
        '404':
          description: No editors found.
  /events/{eventId}:
    parameters:
      - in: path
        name: eventId
        schema:
          type: integer
          example: 1
        description: The id of the event to return.
        required: true
    get:
      summary: Returns a event.
      tags:
        - events
      responses:
        '200':
          description: The event.
        '404':
          $ref: '#components/responses/NotFound'
    put:
      summary: Replaces a event.
      tags:
        - events
      parameters:
        - in: body
          name: Event
          required: true
          description: The new event.
          schema:
            $ref: "#/definitions/Event"
      responses:
        '200':
          description: The new event.
        '400':
          $ref: '#components/responses/BadRequest'
        '404':
          $ref: '#components/responses/NotFound'
    patch:
      summary: Updates a event.
      tags:
        - events
      parameters:
        - in: body
          name: Event
          required: true
          description: The new event data.
          schema:
            $ref: "#/definitions/Event"
      responses:
        '200':
          description: The event updated.
        '404':
          $ref: '#components/responses/NotFound'
    delete:
      summary: Deletes a event.
      tags:
        - events
      responses:
        '200':
          description: Deleted.
        '404':
          $ref: '#components/responses/NotFound'
  /events:
    post:
      summary: Adds a new event.
      tags:
        - events
      parameters:
        - name: Event
          in: body
          required: true
          description: The new event.
          schema:
            $ref: "#/definitions/Event"
      responses:
        '201':
          description: Event created.
        '400':
          $ref: '#components/responses/BadRequest'
        '409':
          $ref: '#components/responses/Conflict'
    get:
      summary: Returns a list of events.
      tags:
        - events
      parameters:
        - in: query
          name: id
          schema:
            type: integer
            example: 1
          description: The event id.
        - in: query
          name: date
          schema:
            type: date
            example: '2019-02-22'
            description: The event date.
        - in: query
          name: description
          schema:
            type: string
            example: "Rencontre avec l'auteure vietnamienne Thuy Linh Ti Ngo."
          description: The event description.
        - in: query
          name: title
          schema:
            type: string
            example: "À la découverte du Vietnam"
          description: The event title.
      responses:
        '200':
          description: The list of events.
        '404':
          description: No events found.
  /awards/{awardId}:
    parameters:
      - in: path
        name: awardId
        schema:
          type: integer
          example: 1
        description: The id of the award to return.
        required: true
    get:
      summary: Returns a award.
      tags:
        - awards
      responses:
        '200':
          description: The award.
        '404':
          $ref: '#components/responses/NotFound'
    put:
      summary: Replaces a award.
      tags:
        - awards
      parameters:
        - in: body
          name: Award
          required: true
          description: The new award.
          schema:
            $ref: "#/definitions/Award"
      responses:
        '200':
          description: The new award.
        '400':
          $ref: '#components/responses/BadRequest'
        '404':
          $ref: '#components/responses/NotFound'
    patch:
      summary: Updates a award.
      tags:
        - awards
      parameters:
        - in: body
          name: Award
          required: true
          description: The new award data.
          schema:
            $ref: "#/definitions/Award"
      responses:
        '200':
          description: The award updated.
        '404':
          $ref: '#components/responses/NotFound'
    delete:
      summary: Deletes a award.
      tags:
        - awards
      responses:
        '200':
          description: Deleted.
        '404':
          $ref: '#components/responses/NotFound'
  /awards:
    post:
      summary: Adds a new award.
      tags:
        - awards
      parameters:
        - name: Award
          in: body
          required: true
          description: The new award.
          schema:
            $ref: "#/definitions/Award"
      responses:
        '201':
          description: Award created.
        '400':
          $ref: '#components/responses/BadRequest'
        '409':
          $ref: '#components/responses/Conflict'
    get:
      summary: Returns a list of awards.
      tags:
        - awards
      parameters:
        - in: query
          name: id
          schema:
            type: integer
            example: 1
          description: The award id.
        - in: query
          name: name
          schema:
            type: string
            example: "Prix Goncourt"
          description: The award name.
      responses:
        '200':
          description: The list of awards.
        '404':
          description: No awards found.
  /authors/{authorId}:
    parameters:
      - in: path
        name: authorId
        schema:
          type: integer
          example: 1
        description: The id of the author to return.
        required: true
    get:
      summary: Returns a author.
      tags:
        - authors
      responses:
        '200':
          description: The author.
        '404':
          $ref: '#components/responses/NotFound'
    put:
      summary: Replaces a author.
      tags:
        - authors
      parameters:
        - in: body
          name: Author
          required: true
          description: The new author.
          schema:
            $ref: "#/definitions/Author"
      responses:
        '200':
          description: The new author.
        '400':
          $ref: '#components/responses/BadRequest'
        '404':
          $ref: '#components/responses/NotFound'
    patch:
      summary: Updates a author.
      tags:
        - authors
      parameters:
        - in: body
          name: Author
          required: true
          description: The new author data.
          schema:
            $ref: "#/definitions/Author"
      responses:
        '200':
          description: The author updated.
        '404':
          $ref: '#components/responses/NotFound'
    delete:
      summary: Deletes a author.
      tags:
        - authors
      responses:
        '200':
          description: Deleted.
        '404':
          $ref: '#components/responses/NotFound'
  /authors:
    post:
      summary: Adds a new author.
      tags:
        - authors
      parameters:
        - name: Author
          in: body
          required: true
          description: The new author.
          schema:
            $ref: "#/definitions/Author"
      responses:
        '201':
          description: Author created.
        '400':
          $ref: '#components/responses/BadRequest'
        '409':
          $ref: '#components/responses/Conflict'
    get:
      summary: Returns a list of authors.
      tags:
        - authors
      parameters:
        - in: query
          name: id
          schema:
            type: integer
            example: 1
          description: Author ID
        - in: query
          name: lastName
          schema:
            type: string
            example: "Verne"
          description: Author last name.
        - in: query
          name: firstName
          schema:
            type: string
            example: "Jules"
          description : Author first name.
        - in: query
          name: biography
          schema:
            type: string
            example: "Biographie : Jules Verne est un écrivain français, dont une grande partie de l'œuvre est consacrée à
        des romans d'aventures et de science-fiction."
          description: Author biography.
        - in: query
          name: awards
          schema:
            type: array
            example: [{id: 1, name: "Prix Goncourt"}, {id: 2, name: "Prix Renaudot"}]
          description: Author awards.
      responses:
        '200':
          description: Authors data found
        '404':
          description: Authors not found
  /genres/{genreId}:
    parameters:
      - in: path
        name: genreId
        schema:
          type: integer
          example: 1
        description: The id of the genre to return.
        required: true
    get:
      summary: Returns a genre.
      tags:
        - genres
      responses:
        '200':
          description: The genre.
        '404':
          $ref: '#components/responses/NotFound'
    put:
      summary: Replaces a genre.
      tags:
        - genres
      parameters:
        - in: body
          name: Genre
          required: true
          description: The new genre.
          schema:
            $ref: "#/definitions/Genre"
      responses:
        '200':
          description: The new genre.
        '400':
          $ref: '#components/responses/BadRequest'
        '404':
          $ref: '#components/responses/NotFound'
    patch:
      summary: Updates a genre.
      tags:
        - genres
      parameters:
        - in: body
          name: Genre
          required: true
          description: The new genre data.
          schema:
            $ref: "#/definitions/Genre"
      responses:
        '200':
          description: The genre updated.
        '404':
          $ref: '#components/responses/NotFound'
    delete:
      summary: Deletes a genre.
      tags:
        - genres
      responses:
        '200':
          description: Deleted.
        '404':
          $ref: '#components/responses/NotFound'
  /genres:
    post:
      summary: Adds a new genre.
      tags:
        - genres
      parameters:
        - name: Genre
          in: body
          required: true
          description: The new genre.
          schema:
            $ref: "#/definitions/Genre"
      responses:
        '201':
          description: Genre created.
        '400':
          $ref: '#components/responses/BadRequest'
        '409':
          $ref: '#components/responses/Conflict'
    get:
      summary: Returns a list of genres.
      tags:
        - genres
      parameters:
        - in: query
          name: id
          schema:
            type: integer
            example: 1
          description: The genre id.
        - in: query
          name: name
          schema:
            type: string
            example: "Thriller"
          description: The genre name.
      responses:
        '200':
          description: The list of genres.
        '404':
          description: No genres found.
  /books/{bookRef}:
    parameters:
      - in: path
        name: bookRef
        schema:
          type: integer
          example: 1
        description: The id of the book to return.
        required: true
    get:
      summary: Returns a book.
      tags:
        - books
      responses:
        '200':
          description: The book.
        '404':
          $ref: '#components/responses/NotFound'
    put:
      summary: Replaces a book.
      tags:
        - books
      parameters:
        - in: body
          name: Book
          required: true
          description: The new book.
          schema:
            $ref: "#/definitions/Book"
      responses:
        '200':
          description: The new book.
        '400':
          $ref: '#components/responses/BadRequest'
        '404':
          $ref: '#components/responses/NotFound'
    patch:
      summary: Updates a book.
      tags:
        - books
      parameters:
        - in: body
          name: Book
          required: true
          description: The new book data.
          schema:
            $ref: "#/definitions/Book"
      responses:
        '200':
          description: The book updated.
        '404':
          $ref: '#components/responses/NotFound'
    delete:
      summary: Deletes a book.
      tags:
        - books
      responses:
        '200':
          description: Deleted.
        '404':
          $ref: '#components/responses/NotFound'
  /books:
    post:
      summary: Adds a new book.
      tags:
        - books
      parameters:
        - name: Book
          in: body
          required: true
          description: The book to create.
          schema:
            $ref: "#/definitions/Book"
      responses:
        '201':
          description: Book created.
        '400':
          $ref: '#components/responses/BadRequest'
        '409':
          $ref: '#components/responses/Conflict'
    get:
      summary: Returns a list of books.
      tags:
        - books
      parameters:
        - in: query
          name: title
          schema:
            type: string
            example: "Comment faire ?"
          description: The title of books to return.
        - in: query
          name: authorId
          schema:
            type: integer
            example: 1
          description: The author id of books to return.
        - in: query
          name: publicationYear
          schema:
            type: string
            example: "2019"
          description : The publication year of books to return.
        - in: query
          name: editorId
          schema:
            type: integer
            example: 1
          description: The editor id of books to return.
        - in: query
          name: genre
          schema:
            type: string
            example: "Thriller"
          description: The genre of books to return.
      responses:
        '200':
          description: The list of books.
        '404':
          description: No books found.
components:
  responses:
    Conflict:
      description: Conflict.
    BadRequest:
      description: Bad input parameter.
    NotFound:
      description: Resource not found.
  examples:
    authorExample:
      value:
        id: 1
        lastName: "Verne"
        firstName: "Jules"
      summary: A sample author.
    editorExample:
      value:
        id: 1
        name: "Poches éditions"
definitions:
  Editor:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        example: 1
        description: The editor id.
      name:
        type: string
        example: "Poches éditions"
        description: The editor name.
  Event:
    type: object
    required:
      - id
      - date
      - description
      - title
    properties:
      id:
        type: integer
        example: 1
        description: The event id.
      date:
        type: string
        format: date
        example: '2019-02-22'
        description: The event date.
      description:
        type: string
        example: "Rencontre avec l'auteure vietnamienne Thuy Linh Ti Ngo."
        description: The event description.
      title:
        type: string
        example: "À la découverte du Vietnam"
        description: The event title.
  Award:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        example: 1
        description: The award id.
      name:
        type: string
        example: "Prix Goncourt"
        description: The award name.
  Author:
    type: object
    required:
      - id
      - lastName
      - firstName
    properties:
      id:
        type: integer
        example: 1
        description: Author id.
      lastName:
        type: string
        example: "Verne"
        description: Author last name.
      firstName:
        type: string
        example: "Jules"
        description: Author first name.
      biography:
        type: string
        example: "Biographie : Jules Verne est un écrivain français, dont une grande partie de l'œuvre est consacrée à
        des romans d'aventures et de science-fiction."
        description: Author biography.
        default: null
      awards:
        type: array
        items:
          type: object
        example: [{id: 1, name: "Prix Goncourt"}, {id: 2, name: "Prix Renaudot"}]
        description: Author awards.
  Genre:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        example: 1
        description: The genre id.
      name:
        type: string
        example: "Thriller"
        description: The genre name.
  Book:
    type: object
    required:
      - title
      - author
      - editor
      - bookRef
      - publicationYear
      - price
      - genre
    properties:
      title:
        type: string
        example: "Le tour du monde en 80 jours"
        description: The book title.
      author:
        type: object
        example: {id: 1, lastName: "Verne", firstName: "Jules"}
        description: The book author.
        schema:
          $ref: "#/definitions/Author"
      editor:
        type: object
        schema:
          $ref: "#/definitions/Editor"
        example: '#components/examples/editorExample'
        description: The book editor.
      bookRef:
        type: integer
        example: 9782330053901
        description: The book reference.
      publicationYear:
        type: string
        example: "2019"
        description: The book publication year.
      price:
        type: number
        example: 8.00
        description: The book price.
      genre:
        type: array
        items:
          type: object
        example: [{id: 1, name: "Aventure"}, {id: 2, name: "Thriller"}]
        description: The book genre.
      summary:
        type: string
        example: "Phileas Fogg, parfait gentleman anglais, membre du Reform club est un homme froid,
        ponctuel etméticuleux, mais aussi généreux et courageux."
        description: The book summary.
        default: null
      editorWord:
        type: string
        example: "Sûrement l'une de ses meilleures oeuvres."
        description: What the editor says about this book.
        default: null
      booksellerWord:
        type: string
        example: "L'un de nos coups de coeur 2019 !"
        description: What the bookseller says about this book.
        default: null
      details:
        type: object
        properties:
          pagesNumber:
            type: integer
            example: 380
            description: The book pages number.
            default: null
          length:
            type: integer
            example: 240
            description: The book length in millimeters.
            default: null
          width:
            type: integer
            example: 145
            description: The book width in millimeters.
            default: null
          thickness:
            type: integer
            example: 15
            description: The book thickness in millimeters.
            default: null
          weight:
            type: integer
            example: 640
            description: The book weight in gramms.
            default: null